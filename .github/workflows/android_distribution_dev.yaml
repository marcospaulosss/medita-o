name: Android distribution Dev

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    permissions:
      checks: write
      contents: write
      packages: write
    runs-on: ubuntu-latest  # Alterado para ubuntu-latest

    steps:
      - name: Efetua checkout da branch
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Setup Fastlane
        run: |
          cd android
          echo "gem 'ostruct'" >> Gemfile
          gem install bundler:2.4.19
          bundle install

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'
          channel: 'stable'

      - name: Verify project structure
        run: |
          echo "Project structure:"
          ls -la
          echo "\nAndroid directory contents:"
          ls -la android || echo "Android directory not found!"
          echo "\nGradle files:"
          find . -name "gradlew" -type f
          echo "\nFlutter config:"
          flutter doctor -v

      - name: Setup Firebase files
        run: |
          if [ -z "${{ secrets.SERVICE_CREDENTIALS_FILE_HOMOLOG }}" ]; then
            echo "Error: SERVICE_CREDENTIALS_FILE_HOMOLOG secret is empty"
            exit 1
          fi
          
          # Criar diretório se não existir
          mkdir -p android/app
          
          # Salvar o conteúdo em um arquivo temporário
          echo "${{ secrets.SERVICE_CREDENTIALS_FILE_HOMOLOG }}" > temp_encoded.txt
          
          # Remover caracteres inválidos e espaços em branco
          tr -d '\r\n ' < temp_encoded.txt > temp_clean.txt
          
          # Tentar decodificar e validar o JSON
          if cat temp_clean.txt | base64 -d > android/app/google-services.json 2>/dev/null; then
            if jq empty android/app/google-services.json 2>/dev/null; then
              echo "Firebase configuration file successfully decoded and validated"
              echo "File size: $(ls -lh android/app/google-services.json | awk '{print $5}')"
              echo "File contents preview (first 3 lines):"
              head -n 3 android/app/google-services.json
            else
              echo "Error: Invalid JSON format in decoded file"
              exit 1
            fi
          else
            echo "Error: Failed to decode base64 content"
            echo "Debug info:"
            echo "- Encoded content length: $(wc -c < temp_clean.txt)"
            echo "- First few characters: $(head -c 20 temp_clean.txt)"
            rm -f temp_encoded.txt temp_clean.txt
            exit 1
          fi
          
          # Limpar arquivos temporários
          rm -f temp_encoded.txt temp_clean.txt

      - name: Build projeto
        run: |
          # Preparar ambiente Flutter
          chmod +x localization
          flutter clean
          flutter pub get
          ./localization
          flutter packages pub run build_runner build --delete-conflicting-outputs
          
          # Preparar ambiente Android
          cd android
          
          # Configurar JAVA_HOME para o Gradle
          export JAVA_HOME=$JAVA_HOME_17_X64
          echo "Using JAVA_HOME: $JAVA_HOME"
          
          # Verificar e gerar gradlew se necessário
          if [ ! -f "gradlew" ]; then
            echo "Gradle wrapper não encontrado. Gerando..."
            # Usar o Gradle com JAVA_HOME explícito
            JAVA_HOME=$JAVA_HOME_17_X64 gradle wrapper
            if [ ! -f "gradlew" ]; then
              echo "Tentando gerar wrapper com comando alternativo..."
              JAVA_HOME=$JAVA_HOME_17_X64 gradle init
              JAVA_HOME=$JAVA_HOME_17_X64 gradle wrapper
            fi
          fi
          
          # Verificar novamente se gradlew existe
          if [ ! -f "gradlew" ]; then
            echo "Error: Não foi possível gerar o gradlew"
            echo "Contents of android directory:"
            ls -la
            echo "Tentando regenerar arquivos da plataforma..."
            cd ..
            flutter create --platforms=android .
            cd android
            if [ ! -f "gradlew" ]; then
              echo "Falha ao gerar gradlew mesmo após regenerar plataforma"
              exit 1
            fi
          fi
          
          # Dar permissão de execução ao gradlew
          chmod +x gradlew
          
          # Executar tarefas do Gradle com JAVA_HOME explícito
          JAVA_HOME=$JAVA_HOME_17_X64 ./gradlew clean
          JAVA_HOME=$JAVA_HOME_17_X64 ./gradlew signingReport
          cd ..
          
          # Build APK
          echo "Building APK..."
          flutter build apk --release --flavor dev -t lib/core/flavors/main_dev.dart -v
          
          # Verificar se o APK foi gerado
          if [ ! -f "build/app/outputs/flutter-apk/app-dev-release.apk" ]; then
            echo "Error: APK file not found at expected location"
            echo "Contents of build directory:"
            find build -name "*.apk" -type f
            exit 1
          fi
          
          echo "APK build successful!"
          echo "APK size: $(ls -lh build/app/outputs/flutter-apk/app-dev-release.apk | awk '{print $5}')"

      - name: Check build artifacts
        run: |
          echo "Listing all APK files:"
          find build/app/outputs/flutter-apk -name "*.apk" -type f -exec ls -lh {} \;
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-dev-release
          path: build/app/outputs/flutter-apk/app-dev-release.apk
          retention-days: 5
          if-no-files-found: error

      - name: Deploy do Firebase
        if: success()
        run: |
          cd android
          bundle exec fastlane firebase
        env:
          FIREBASE_TESTER_GROUPS: ${{ secrets.FIREBASE_TESTER_GROUPS }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}