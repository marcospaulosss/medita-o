name: Android distribution Dev

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    permissions:
      checks: write
      contents: write
      packages: write
    runs-on: ubuntu-latest  # Alterado para ubuntu-latest

    steps:
      - name: Efetua checkout da branch
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Setup Fastlane
        run: |
          cd android
          echo "gem 'ostruct'" >> Gemfile
          gem install bundler:2.4.19
          bundle install

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'
          channel: 'stable'

      - name: Setup Firebase files
        run: |
          if [ -z "${{ secrets.SERVICE_CREDENTIALS_FILE_HOMOLOG }}" ]; then
            echo "Error: SERVICE_CREDENTIALS_FILE_HOMOLOG secret is empty"
            exit 1
          fi
          
          # Criar diretório se não existir
          mkdir -p android/app
          
          # Tentar decodificar e validar o JSON
          if echo "${{ secrets.SERVICE_CREDENTIALS_FILE_HOMOLOG }}" | base64 -d > android/app/google-services.json 2>/dev/null; then
            if jq empty android/app/google-services.json 2>/dev/null; then
              echo "Firebase configuration file successfully decoded and validated"
            else
              echo "Error: Invalid JSON format in decoded file"
              exit 1
            fi
          else
            echo "Error: Failed to decode base64 content"
            exit 1
          fi

      - name: Build projeto
        run: |
          chmod +x localization
          flutter clean
          flutter pub get
          ./localization
          flutter packages pub run build_runner build --delete-conflicting-outputs
          cd android
          ./gradlew clean
          ./gradlew signingReport
          cd ..
          # Build APK
          echo "Building APK..."
          flutter build apk --release --flavor dev -t lib/core/flavors/main_dev.dart -v
          
          # Verificar se o APK foi gerado
          if [ ! -f "build/app/outputs/flutter-apk/app-dev-release.apk" ]; then
            echo "Error: APK file not found at expected location"
            echo "Contents of build/app/outputs/flutter-apk/:"
            ls -la build/app/outputs/flutter-apk/
            exit 1
          fi
          
          echo "APK build successful!"
          echo "APK size: $(ls -lh build/app/outputs/flutter-apk/app-dev-release.apk | awk '{print $5}')"

      - name: Check build artifacts
        run: |
          echo "Listing all APK files:"
          find build/app/outputs/flutter-apk -name "*.apk" -type f -exec ls -lh {} \;
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-dev-release
          path: build/app/outputs/flutter-apk/app-dev-release.apk
          retention-days: 5
          if-no-files-found: error

      - name: Deploy do Firebase
        if: success()
        run: |
          cd android
          bundle exec fastlane firebase
        env:
          FIREBASE_TESTER_GROUPS: ${{ secrets.FIREBASE_TESTER_GROUPS }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}