fastlane_version "2.214.0"

default_platform :ios

platform :ios do

    before_all do
        setup_circle_ci
        app_store_connect_api_key(
          in_house: false,
          key_id: "4QX6T64C47",
          key_filepath: "./fastlane/AuthKey_4QX6T64C47.p8",
          issuer_id: "69a6de83-5f09-47e3-e053-5b8c7c11a4d1",
        )
    end

    lane :getTeamNames do
        require "spaceship" 
        clientTunes = Spaceship::Tunes.login(ENV["APPLE_ID"], ENV["FASTLANE_PASSWORD"])
        client = Spaceship::Portal.login(ENV["APPLE_ID"] ,ENV["FASTLANE_PASSWORD"])
      
        UI.message "* Developer Portal Team ID:"
        strDevPortal = "" 
        client.teams.each do |team|
            puts "#{team}
            UI.message "#{team['name']} (#{team['teamId']})"
            strDevPortal << "#{team['name']} (#{team['teamId']})||"
        end

        UI.message "* App Store Connect Team ID:"
        strClientTunes = "" 
        clientTunes.teams.each do |team|
            UI.message "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})"
            strClientTunes << "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})||"
        end 
    end
    
    lane :create_keys do
      match(type: "development", force_for_new_devices: true)
      match(type: "adhoc", force_for_new_devices: true)
      match(type: "appstore")
    end

    desc "Download keys"
    lane :download_keys do
      match(type: "development", readonly: true)
      match(type: "adhoc", readonly: true)
      match(type: "appstore", readonly: true)
    end

    lane :create_keys_production do
      env_file_path = './fastlane/prod/.env'
      match(type: "development", app_identifier: "com.polvo.Aplicativo5", force_for_new_devices: true)
      match(type: "adhoc", app_identifier: "com.polvo.Aplicativo5", force_for_new_devices: true)
      match(type: "appstore", app_identifier: "com.polvo.Aplicativo5")
    end

    desc "Download keys production"
    lane :download_keys_production do
      env_file_path = './fastlane/prod/.env'
      match(type: "development", app_identifier: "com.polvo.Aplicativo5", readonly: true)
      match(type: "adhoc", app_identifier: "com.polvo.Aplicativo5", readonly: true)
      match(type: "appstore", app_identifier: "com.polvo.Aplicativo5", readonly: true)
    end
    
    desc "Deploy to Firebase Distribution"
    lane :firebase do
        # https://firebase.google.com/docs/app-distribution/ios/distribute-fastlane
        # bundle exec fastlane add_plugin firebase_app_distribution
        firebase_app_distribution(
            app: ENV["FIREBASE_APP_ID_IOS"],
            ipa_path: "../build/ios/ipa/Dev.ipa",
            firebase_cli_token: ENV["FIREBASE_TOKEN"],
            groups: "testers"
        )
    end

    desc "Upload to Test Flight"
    lane :tf do

        # https://docs.fastlane.tools/actions/upload_to_testflight
        upload_to_testflight(
            ipa: "../build/ios/ipa/5 Minutos.ipa",
            skip_waiting_for_build_processing: true,
            apple_id: ENV["APP_STORE_CONNECT_APPLE_ID"]
        )
    end

    desc "Deploy to Firebase Distribution Productions"
    lane :firebase_production do

        # https://firebase.google.com/docs/app-distribution/ios/distribute-fastlane
        # bundle exec fastlane add_plugin firebase_app_distribution
        firebase_app_distribution(
            app: ENV["FIREBASE_APP_ID_IOS"],
            ipa_path: "../build/ios/ipa/5 Minutos.ipa",
            firebase_cli_token: ENV["FIREBASE_TOKEN"],
            groups: "testers"
        )
    end

    desc "Upload to Test Flight production"
    lane :tf_prod do

        # https://docs.fastlane.tools/actions/upload_to_testflight
        upload_to_testflight(
            ipa: "../build/ios/ipa/5 Minutos.ipa",
            skip_waiting_for_build_processing: true,
            apple_id: ENV["APP_STORE_CONNECT_APPLE_ID"]
        )
    end

    desc "Increment Build Number"
    lane :inc do
        increment_build_number({
          build_number: latest_testflight_build_number + 1
        })
    end

    lane :increment_version do
      latest_release = firebase_app_distribution_get_latest_release(
        app: ENV["FIREBASE_APP_ID"]
      )
      increment_build_number({ build_number: latest_release[:buildVersion].to_i + 1 })
    end
end