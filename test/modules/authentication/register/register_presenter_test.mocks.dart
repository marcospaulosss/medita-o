// Mocks generated by Mockito 5.4.4 from annotations
// in cinco_minutos_meditacao/test/modules/authentication/register/register_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:auto_route/auto_route.dart' as _i7;
import 'package:cinco_minutos_meditacao/core/routers/app_router.dart' as _i6;
import 'package:cinco_minutos_meditacao/modules/authentication/screens/register/register_contracts.dart'
    as _i3;
import 'package:cinco_minutos_meditacao/shared/clients/models/requests/auth_request.dart'
    as _i9;
import 'package:cinco_minutos_meditacao/shared/models/error.dart' as _i2;
import 'package:dio/dio.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomError_0 extends _i1.SmartFake implements _i2.CustomError {
  _FakeCustomError_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterViewContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterViewContract extends _i1.Mock
    implements _i3.RegisterViewContract {
  MockRegisterViewContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void showError(String? message) => super.noSuchMethod(
        Invocation.method(
          #showError,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showLoading() => super.noSuchMethod(
        Invocation.method(
          #showLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showNormalState() => super.noSuchMethod(
        Invocation.method(
          #showNormalState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showErrorEmailInvalid() => super.noSuchMethod(
        Invocation.method(
          #showErrorEmailInvalid,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showInvalidCredentialsSnackBar({String? message}) => super.noSuchMethod(
        Invocation.method(
          #showInvalidCredentialsSnackBar,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CustomError].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomError extends _i1.Mock implements _i2.CustomError {
  MockCustomError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set message(String? _message) => super.noSuchMethod(
        Invocation.setter(
          #message,
          _message,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set code(_i2.ErrorCodes? _code) => super.noSuchMethod(
        Invocation.setter(
          #code,
          _code,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set stackTrace(StackTrace? _stackTrace) => super.noSuchMethod(
        Invocation.setter(
          #stackTrace,
          _stackTrace,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get getErrorMessage => (super.noSuchMethod(
        Invocation.getter(#getErrorMessage),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#getErrorMessage),
        ),
      ) as String);

  @override
  _i2.CustomError sendErrorToCrashlytics({
    String? message,
    _i2.ErrorCodes? code,
    StackTrace? stackTrace,
    _i5.DioException? dioException,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendErrorToCrashlytics,
          [],
          {
            #message: message,
            #code: code,
            #stackTrace: stackTrace,
            #dioException: dioException,
          },
        ),
        returnValue: _FakeCustomError_0(
          this,
          Invocation.method(
            #sendErrorToCrashlytics,
            [],
            {
              #message: message,
              #code: code,
              #stackTrace: stackTrace,
              #dioException: dioException,
            },
          ),
        ),
      ) as _i2.CustomError);
}

/// A class which mocks [AppRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouter extends _i1.Mock implements _i6.AppRouter {
  MockAppRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.AutoRoute> get routes => (super.noSuchMethod(
        Invocation.getter(#routes),
        returnValue: <_i7.AutoRoute>[],
      ) as List<_i7.AutoRoute>);

  @override
  void goToReplace(_i7.PageRouteInfo<dynamic>? route) => super.noSuchMethod(
        Invocation.method(
          #goToReplace,
          [route],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goTo(
    _i7.PageRouteInfo<dynamic>? route, {
    _i6.OnCloseRoute? onClose,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #goTo,
          [route],
          {#onClose: onClose},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void sendOpenScreenEvent() => super.noSuchMethod(
        Invocation.method(
          #sendOpenScreenEvent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.CustomError?> requestRegister(_i9.AuthRequest? authRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestRegister,
          [authRequest],
        ),
        returnValue: _i8.Future<_i2.CustomError?>.value(),
      ) as _i8.Future<_i2.CustomError?>);
}
