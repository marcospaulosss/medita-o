// Mocks generated by Mockito 5.4.2 from annotations
// in cinco_minutos_meditacao/test/modules/common/splash_screen/splash_screen_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:auto_route/auto_route.dart' as _i13;
import 'package:device_info_plus/device_info_plus.dart' as _i11;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i2;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i3;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i4;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i6;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i5;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i7;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i8;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAndroidDeviceInfo_0 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_1 extends _i1.SmartFake implements _i3.IosDeviceInfo {
  _FakeIosDeviceInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxDeviceInfo_2 extends _i1.SmartFake
    implements _i4.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebBrowserInfo_3 extends _i1.SmartFake
    implements _i5.WebBrowserInfo {
  _FakeWebBrowserInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsDeviceInfo_4 extends _i1.SmartFake
    implements _i6.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsDeviceInfo_5 extends _i1.SmartFake
    implements _i7.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseDeviceInfo_6 extends _i1.SmartFake
    implements _i8.BaseDeviceInfo {
  _FakeBaseDeviceInfo_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidBuildVersion_7 extends _i1.SmartFake
    implements _i2.AndroidBuildVersion {
  _FakeAndroidBuildVersion_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDisplayMetrics_8 extends _i1.SmartFake
    implements _i2.AndroidDisplayMetrics {
  _FakeAndroidDisplayMetrics_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeState_9<T extends _i9.StatefulWidget> extends _i1.SmartFake
    implements _i9.State<T> {
  _FakeState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_10 extends _i1.SmartFake
    implements _i9.StatefulElement {
  _FakeStatefulElement_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_11 extends _i1.SmartFake
    implements _i10.DiagnosticsNode {
  _FakeDiagnosticsNode_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i11.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i12.Future<_i2.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_0(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i12.Future<_i2.AndroidDeviceInfo>);
  @override
  _i12.Future<_i3.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i12.Future<_i3.IosDeviceInfo>.value(_FakeIosDeviceInfo_1(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i12.Future<_i3.IosDeviceInfo>);
  @override
  _i12.Future<_i4.LinuxDeviceInfo> get linuxInfo => (super.noSuchMethod(
        Invocation.getter(#linuxInfo),
        returnValue:
            _i12.Future<_i4.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_2(
          this,
          Invocation.getter(#linuxInfo),
        )),
      ) as _i12.Future<_i4.LinuxDeviceInfo>);
  @override
  _i12.Future<_i5.WebBrowserInfo> get webBrowserInfo => (super.noSuchMethod(
        Invocation.getter(#webBrowserInfo),
        returnValue:
            _i12.Future<_i5.WebBrowserInfo>.value(_FakeWebBrowserInfo_3(
          this,
          Invocation.getter(#webBrowserInfo),
        )),
      ) as _i12.Future<_i5.WebBrowserInfo>);
  @override
  _i12.Future<_i6.MacOsDeviceInfo> get macOsInfo => (super.noSuchMethod(
        Invocation.getter(#macOsInfo),
        returnValue:
            _i12.Future<_i6.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_4(
          this,
          Invocation.getter(#macOsInfo),
        )),
      ) as _i12.Future<_i6.MacOsDeviceInfo>);
  @override
  _i12.Future<_i7.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
        Invocation.getter(#windowsInfo),
        returnValue:
            _i12.Future<_i7.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_5(
          this,
          Invocation.getter(#windowsInfo),
        )),
      ) as _i12.Future<_i7.WindowsDeviceInfo>);
  @override
  _i12.Future<_i8.BaseDeviceInfo> get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue:
            _i12.Future<_i8.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_6(
          this,
          Invocation.getter(#deviceInfo),
        )),
      ) as _i12.Future<_i8.BaseDeviceInfo>);
}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i2.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AndroidBuildVersion get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _FakeAndroidBuildVersion_7(
          this,
          Invocation.getter(#version),
        ),
      ) as _i2.AndroidBuildVersion);
  @override
  String get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: '',
      ) as String);
  @override
  String get bootloader => (super.noSuchMethod(
        Invocation.getter(#bootloader),
        returnValue: '',
      ) as String);
  @override
  String get brand => (super.noSuchMethod(
        Invocation.getter(#brand),
        returnValue: '',
      ) as String);
  @override
  String get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: '',
      ) as String);
  @override
  String get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: '',
      ) as String);
  @override
  String get fingerprint => (super.noSuchMethod(
        Invocation.getter(#fingerprint),
        returnValue: '',
      ) as String);
  @override
  String get hardware => (super.noSuchMethod(
        Invocation.getter(#hardware),
        returnValue: '',
      ) as String);
  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: '',
      ) as String);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get manufacturer => (super.noSuchMethod(
        Invocation.getter(#manufacturer),
        returnValue: '',
      ) as String);
  @override
  String get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: '',
      ) as String);
  @override
  String get product => (super.noSuchMethod(
        Invocation.getter(#product),
        returnValue: '',
      ) as String);
  @override
  List<String> get supported32BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported32BitAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  List<String> get supported64BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported64BitAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  List<String> get supportedAbis => (super.noSuchMethod(
        Invocation.getter(#supportedAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  String get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: '',
      ) as String);
  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: '',
      ) as String);
  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);
  @override
  List<String> get systemFeatures => (super.noSuchMethod(
        Invocation.getter(#systemFeatures),
        returnValue: <String>[],
      ) as List<String>);
  @override
  _i2.AndroidDisplayMetrics get displayMetrics => (super.noSuchMethod(
        Invocation.getter(#displayMetrics),
        returnValue: _FakeAndroidDisplayMetrics_8(
          this,
          Invocation.getter(#displayMetrics),
        ),
      ) as _i2.AndroidDisplayMetrics);
  @override
  String get serialNumber => (super.noSuchMethod(
        Invocation.getter(#serialNumber),
        returnValue: '',
      ) as String);
  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i2.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename => (super.noSuchMethod(
        Invocation.getter(#codename),
        returnValue: '',
      ) as String);
  @override
  String get incremental => (super.noSuchMethod(
        Invocation.getter(#incremental),
        returnValue: '',
      ) as String);
  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: '',
      ) as String);
  @override
  int get sdkInt => (super.noSuchMethod(
        Invocation.getter(#sdkInt),
        returnValue: 0,
      ) as int);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AutoRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutoRouter extends _i1.Mock implements _i13.AutoRouter {
  MockAutoRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.NavigatorObserversBuilder get navigatorObservers => (super.noSuchMethod(
        Invocation.getter(#navigatorObservers),
        returnValue: () => <_i9.NavigatorObserver>[],
      ) as _i13.NavigatorObserversBuilder);
  @override
  bool get inheritNavigatorObservers => (super.noSuchMethod(
        Invocation.getter(#inheritNavigatorObservers),
        returnValue: false,
      ) as bool);
  @override
  _i9.State<_i13.AutoRouter> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_9<_i13.AutoRouter>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i9.State<_i13.AutoRouter>);
  @override
  _i9.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_10(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i9.StatefulElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void debugFillProperties(_i10.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i10.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i10.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_11(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i10.DiagnosticsNode);
  @override
  List<_i10.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i10.DiagnosticsNode>[],
      ) as List<_i10.DiagnosticsNode>);
  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}
